#include <stdio.h>
#include <sys/wait.h>
#include <stdlib.h>
#include <sys/types.h>
#include <signal.h>

void do_sig_child(int signo)
{
	int status;
	pid_t pid;

	while ((pid = waitpid(0, &status, WNOHANG)) > 0)
	{
		if (WIFEXITED(status))
			printf("----------child %d exit %d\n", pid, WEXTITSTATUS(status));
		else if (WIFSIGNALED(status))
			printf("-----------child %d exit %d\n", pid, WTERMSIG(status));
	}
		
}

int main()
{
	int i;
	pid_t pid;	
	for(i=0; i<10; i++)
	{
		pid = fork();
		if( pid == 0)
		{
			break;
		}
		else if ( pid < 0)
		{
			printf("for error\n");
			exit(0);
		}
	}

	if (pid == 0)
	{
		int n = 1;
		while(n--)
		{
			printf("child ID = %d\n", getpid());
			sleep(1);
		}
		return i+1;
	}
	else if ( pid > 0 )
	{
		struct sigaction act, oldact;
		act.sa_flags = 0;
		sigemptyset(&act.sa_mask);
		act.sa_handler = do_sig_child;
		
		sigaction(SIGCHLD, &act, &oldact);
		
		while(1)
		{
			printf("parent ID = %d\n", getpid());
			sleep(1);
		}
	}

	return 0;
}
